\documentclass[12pt]{article}
 
\usepackage[margin=1in]{geometry}
\usepackage{amsmath,amsthm,amssymb, mathtools}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{fixltx2e}
\usepackage[shortlabels]{enumitem}
 
\newcommand{\N}{\mathbb{N}}
\newcommand{\R}{\mathbb{R}}
\newcommand{\Z}{\mathbb{Z}}
\newcommand{\Q}{\mathbb{Q}}

\newenvironment{theorem}[2][Theorem]{\begin{trivlist}
\item[\hskip \labelsep {\bfseries #1}\hskip \labelsep {\bfseries #2.}]}{\end{trivlist}}
\newenvironment{lemma}[2][Lemma]{\begin{trivlist}
\item[\hskip \labelsep {\bfseries #1}\hskip \labelsep {\bfseries #2.}]}{\end{trivlist}}
\newenvironment{exercise}[2][Exercise]{\begin{trivlist}
\item[\hskip \labelsep {\bfseries #1}\hskip \labelsep {\bfseries #2.}]}{\end{trivlist}}
\newenvironment{problem}[2][Problem]{\begin{trivlist}
\item[\hskip \labelsep {\bfseries #1}\hskip \labelsep {\bfseries #2.}]}{\end{trivlist}}
\newenvironment{question}[2][Question]{\begin{trivlist}
\item[\hskip \labelsep {\bfseries #1}\hskip \labelsep {\bfseries #2.}]}{\end{trivlist}}
\newenvironment{corollary}[2][Corollary]{\begin{trivlist}
\item[\hskip \labelsep {\bfseries #1}\hskip \labelsep {\bfseries #2.}]}{\end{trivlist}}
\newcommand{\textfrac}[2]{\dfrac{\text{#1}}{\text{#2}}}

\begin{document}

\title{Ch. 7 - Moving Beyond Linearity}

\author{Chris Hayduk}
\date{\today}

\maketitle

<<echo=F, results = 'hide', warning=FALSE, message=FALSE>>=
# set the global chunk options
opts_chunk$set(message=FALSE, # don't print R messages in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
               warning=FALSE) # don't print warnings in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!

# load .RData files, .R files, etc.
# R packages required
suppressMessages(library(tidyverse, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(ISLR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(splines, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(gam, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(akima, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
@

\section{Polynomial Regression and Step Functions}

Polynomial regression and step functions both exist to give a more flexible fit than standard linear regression will allow. Polynomial regression works by creating new variables out of powers of the initial prediction variable. For example, if the initial predictor is $x$, we may use $x, x^2$, and $x^3$ as our three predictors if we wish to use a cubic fit. On the other than, step functions work by cutitng the data up into bins and then fitting constant functions on each of these bins.\\

We start here by fitting a degree 4 polynomial with the \texttt{lm()} function.

<<>>=
data(Wage)
attach(Wage)
fit=lm(wage~poly(age,4), data=Wage)
coef(summary(fit))
@

The \texttt{poly()} function used above allows us to avoid writing out a long equation by hand. However, by default it returns a matrix whose columns are a basis of orthogonal polynomials. That is, each column is a linear combination of the variables $\text{age}, \text{age}^2, \text{age}^3$, and $\text{age}^4$. While the choice of basis will not affect the fitted values, we may want to use $\text{age}, \text{age}^2, \text{age}^3$, and $\text{age}^4$ directly. We can do this by setting \texttt{raw=TRUE} in the arguments for the function \texttt{poly()}.

<<>>=
fit2=lm(wage~poly(age,4,raw=T),data=Wage)
coef(summary(fit2))
@

There are several other equivalent was of fitting this model in R. For example,

<<>>=
fit2a = lm(wage~age+I(age^2)+I(age^3)+I(age^4), data=Wage)
coef(fit2a)
@

and,

<<>>=
fit2b = lm(wage~cbind(age, age^2, age^3, age^4), data = Wage)
@

We now create a grid of values for \texttt{age} at which we want predictions, and then call the generic \texttt{predict()} function, specifying that we want standard errors as well.

<<>>=
agelims=range(age)
age.grid=seq(from=agelims[1], to = agelims[2])
preds=predict(fit, newdata=list(age=age.grid), se=TRUE)
se.bands = cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
@

The above code creates our grid of age values, gets predictions for each value in the grid, and then sets the standard error bars at 95\% confidence (two times the standard error plus/minus the prediction). Finally, let us plot the data and add the fit from the degree-4 polynomial.

<<>>=
par(mfrow=c(1,1), mar=c(4.5,4.5,1,1), oma=c(0,0,4,0))
plot(age, wage, xlim=agelims, cex=.5, col="darkgrey")
title("Degree-4 Polynomial", outer=T)
lines(age.grid, preds$fit, lwd=2, col="blue")
matlines(age.grid, se.bands, lwd=1, col="blue", lty=3)
@

As we mentioned above, the choice of basis will not affect the fitted values of the function. We can verify this by checking the predicted values on our age grid from both types of our fitted polynomial functions:

<<>>=
preds2 = predict(fit2, newdata=list(age=age.grid), se=TRUE)
max(abs(preds$fit-preds2$fit))
@

As we can see, the maximum of the absolute value of the difference of these two fits is extremely close to 0.\\

In practice, we will want to check several possible polynomial degrees in order to find the simplest model that provides the best fit. We will now fit models ranging from linear to degree-5 polynomials and use the \texttt{anova()} function to perform an analysis of variance in order to determine the best model. Analysis of variance (ANOVA) works by testing the null hypothesis that a model $M_1$ is sufficient to explain the data again the alternative hypothesis that a more complex model $M_2$ is required. In order to use the \texttt{anova()} function, $M_1$ and $M_2$ must be nested models. In this case, we are fitting five different models and wll sequentially compare the simpler model to the more complex model.

<<>>=
fit.1 = lm(wage~age, data=Wage)
fit.2 = lm(wage~poly(age,2), data=Wage)
fit.3 = lm(wage~poly(age,3), data=Wage)
fit.4 = lm(wage~poly(age,4), data=Wage)
fit.5 = lm(wage~poly(age,5), data=Wage)
anova(fit.1, fit.2, fit.3, fit.4, fit.5)
@

The p-value comparing the linear Model 1 to the quadratic Model 2 is essentially 0, indicating that a linear fit is not sufficient. Similarly, the p-value comparing the quadratic Model 2 to the cubic Model 3 is very low, so the quadratic fit is also insufficient. The p-value comparing the cubic model and the degree-4 polynomial is approximately 5\%, while the degree-5 polynomial seems unnecessary because its p-value is 0.37. Hence, either a cubic or quartic polynomial appears to provide a reasonable fit to the data, but lower- or higher-order models are not justified.\\

We can actually avoid using the \texttt{anova()} function since \texttt{poly()} creates orthogonal polynomials:

<<>>=
coef(summary(fit.5))
@

As you can see, the p-values aree exactly the same, and in fact the square of the t-statistics are equal to the F-statistics from the \texttt{anova()} function. However, the ANOVA method works whether or not we used orthogonal polynomials; it also works when we have other terms in the model as well. For example, we can use \texttt{anova()} to compare these three models:

<<>>=
fit.1 = lm(wage~education+age, data=Wage)
fit.2 = lm(wage~education + poly(age,2), data=Wage)
fit.3 = lm(wage~education+poly(age,3), data=Wage)
anova(fit.1, fit.2, fit.3)
@

As an alternative to using ANOVA, we could also choose the polynomial degree using cross-validation.\\

Now let us consider the task of predicting whether an individual earns more than \$250,000 per year. We proceed much as before, except that first we create the appropriate response vector, and then apply the \texttt{glm()} function using \texttt{family=''binomial``} in order to fit a polynomial logistic regression model.

<<>>=
fit = glm(I(wage>250) ~ poly(age,4), data = Wage, family = binomial)
@

We are using the wrapper \texttt{I()} to create the binary response variable on the fly. The expression \texttt{wage>250} evaluates to a logical vairable containing \texttt{TRUEs} and \texttt{FALSEs}, which \texttt{glm()} coerces to binary by setting \texttt{TRUEs} to $1$ and \texttt{FALSEs} to $0$.\\

We now use the \texttt{predict()} function to make our predictions,
<<>>=
preds=predict(fit, newdata=list(age=age.grid),se=T)
@

Confidence intervals in this scenario are a bit more involved than they were in the linear regression case. Our predictions are for the \textit{logit}. That is, we have fit a model of the form $$\log \left(\frac{\text{Pr}(Y=1|X)}{1 - \text{Pr}(Y=1|X)}\right) = X\beta$$, and the predictions given are of the form $X\hat{\beta}$. The standard errors given are also of this form. In order to obtain confidence intervals for $\text{Pr}(Y=1|X)$, we use the transformation $$\text{Pr}(Y=1|X) = \frac{\exp(X\beta)}{1 + \exp(X\beta)}$$

<<>>=
pfit = exp(preds$fit)/(1+exp(preds$fit))
se.bands.logit = cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
se.bands = exp(se.bands.logit)/(1+exp(se.bands.logit))
@

However, the corresponding confidence intervals would not have been sensible because we would end up with negative probabilities! Finally, the right-hand plot from Figure 7.1 was made as follows:

<<>>=
plot(age,I(wage>250), xlim=agelims, type="n", ylim=c(0,0.2))
points(jitter(age), I((wage>250)/5), cex=.5, pch="|", col="darkgrey")
lines(age.grid, pfit, lwd=2, col="blue")
matlines(age.grid, se.bands, lwd=1, col="blue", lty=3)
@

In order to fit a step function, as discussed in Section 7.2, we use the \texttt{cut()} function.

<<>>=
table(cut(age,4))
fit=lm(wage~cut(age,4), data = Wage)
coef(summary(fit))
@

Here \texttt{cut()} automatically picked the cutpoints at 33.5, 49, and 64.5 years of age. The function \texttt{cut()} returns an ordered categorical variable; the \texttt{lm()} function then creates a set of dummy variables for use in the regression. The \texttt{age<33.5} category is left out, so the intercept coefficient of \$94,160 can be interpreted as the average salary for those under 33.5 years of age, and the other coefficients can be interpreted as the average additional salary for those in the other age groups.\\

We can produce predictions and plots just as we did in the case of the polynomial fit:
<<>>=
preds=predict(fit, newdata=list(age=age.grid), se=TRUE)
se.bands = cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)

plot(age, wage, xlim=agelims, cex=.5, col="darkgrey")
title("Step Function", outer=T)
lines(age.grid, preds$fit, lwd=2, col="blue")
matlines(age.grid, se.bands, lwd=1, col="blue", lty=3)
@

\newpage
\section{Splines}

This section covers regression splines, which is a generalization of the step function we computed in the previous section. Instead of fitting constant functions to each cut of the data, we will now fit polynomials. We generally require that these degree $n$ polynomials have continuous $n-1$st derivative at the boundaries of each cut, giving us a very smooth fit to the data.\\

In order to fit regression splines in \texttt{R}, we use the \texttt{splines} library. In Section 7.4, we saw that regression splines can be fit by constructing an appropriate matrix of basis functions. The \texttt{bs()} function generates the entire matrix of basis functions for splines with the specified set of knots. By default, cubic splines are produced (ie. the polynomials are degree $3$). Fitting \texttt{wage} to \texttt{age} using a regression spline is simple:

<<>>=
fit=lm(wage~bs(age, knots=c(25,40,60)),data = Wage)
pred = predict(fit, newdata=list(age=age.grid),se=T)
plot(age, wage, col="gray")
lines(age.grid, pred$fit, lwd=2)
lines(age.grid, pred$fit+2*pred$se, lty="dashed")
lines(age.grid, pred$fit-2*pred$se, lty="dashed")
@

Here we have prespecified knots at ages 25, 40, and 60. This produces a spline with six basis functions. (Recall that a cubic spline with three knots has seven degrees of freedom; these degrees of freedom are used.) We could also use the \texttt{df} option to produce a spline with knots at uniform quantiles of the data.

<<>>=
dim(bs(age, knots=c(25,40,60)))
dim(bs(age,df=6))
attr(bs(age, df=6),"knots")
@

In this case \texttt{R} chooses knots at ages $33.8, 42.0$, and $51.0$, which correspond to the $25$th, $50$th, and $75$th percentiles of \texttt{age}. The function \texttt{bs()} also has a \texttt{degree} argument, so we can fit splines of any degree, rather than the default degree of $3$.\\

In order to instead fit a natural spline, we use the \texttt{ns()} function. Recall that natural splines impose the additional condition that the function be linear on the boundaries (that is, in the first cut and last cut of the data).

<<>>=
#Plot commands from previous chunk
fit=lm(wage~bs(age, knots=c(25,40,60)),data = Wage)
pred = predict(fit, newdata=list(age=age.grid),se=T)
plot(age, wage, col="gray")
lines(age.grid, pred$fit, lwd=2)
lines(age.grid, pred$fit+2*pred$se, lty="dashed")
lines(age.grid, pred$fit-2*pred$se, lty="dashed")

fit2 = lm(wage~ns(age, df=4), data = Wage)
pred2 = predict(fit2, newdata=list(age=age.grid), se=T)
lines(age.grid, pred2$fit, col="red",lwd=2)
@

As with the \texttt{bs()} function, we could instead specify the knots directly using the \texttt{knots} option.\\

In order to fit a smoothing spline, we use the \texttt{smooth.spline()} function. Recall that the smoothing spline function is minimized by a natural cubic spline with knots at the data points $x_1, \ldots, x_n$. Figure 7.8 was produced with the following code:

<<>>=
plot(age, wage, xlim=agelims, cex=.5, col="darkgrey")
title("Smoothing Spline")
fit=smooth.spline(age, wage, df=16)
fit2=smooth.spline(age, wage, cv=TRUE)
fit2$df
lines(fit, col="red",lwd=2)
lines(fit2,col="blue",lwd=2)
legend("topright",legend=c("16 DF", "6.8 DF"), col=c("red","blue"), lty=1, lwd=2, cex=0.8)
@

Notice in the first call to \texttt{smooth.spline()}, we specified \texttt{df=16}. The function then determines which value of $\lambda$ leads to $16$ degrees of freedom. In the second call to \texttt{smooth.spline()}, we select the smoothness level by cross-validation; this results in a value of $\lambda$ that yields $6.8$ degrees of freedom.\\

In order to perform local regression, we use the \texttt{loess()} function.

<<>>=
plot(age, wage, xlim=agelims, cex=.5, col="darkgrey")
title("Local Regression")
fit=loess(wage~age, span=.2, data=Wage)
fit2=loess(wage~age, span=.5, data=Wage)

lines(age.grid, predict(fit, data.frame(age=age.grid)), col="red", lwd=2)
lines(age.grid, predict(fit2,data.frame(age=age.grid)), col="blue", lwd=2)

legend("topright", legend=c("Span=0.2", "Span=0.5"),
       col=c("red","blue"), lty=1, lwd=2, cex=.8)
@


Here we have performed local linear regression using spans of 0.2 and 0.5. That is, each neighborhood consists of 20\% or 50\% of the observations. The larger the span, the smoother the fit. The \texttt{locfit} library can also be used for fitting local regression models in \texttt{R}.

\section{GAMs}

We now fit a GAM to predict \texttt{wage} using natural spline functions of \texttt{year} and \texttt{age}, treating \texttt{education} as a qualitative predictor as in (7.16). Since this is just a big linear regression model using an appropriate choice of basis functions, we can simply do this using the \texttt{lm()} function.

<<>>=
gam1 = lm(wage~ns(year,4) + ns(age,5) + education, data = Wage)
@

We now fit the model (7.16) using smoothing splines rather than natural splines. In order to fit more general sorts of GAMs, using smoothing splines or other components that cannot be expressed in terms of basis functions and then fit using least squares regression, we will need to use the \texttt{gam} library in \texttt{R}.\\

The \texttt{s()} function, which is part of the \texttt{gam} library, is used to indicate that we would like to use a smoothing spline. We specify that the function of \texttt{year} should have 4 degrees of freedom, and that the function of \texttt{age} will have 5 degrees of freedom. Since \texttt{education} is qualitative, we leave it as is and it is converted into four dummy variables. We use the \texttt{gam()} function in order to fit a GAM using these components. All of the terms in (7.16) are fit simultaneously, taking each other into account to explain the response.

<<>>=
gam.m3 = gam(wage~s(year,4) + s(age,5) + education, data=Wage)
@

In order to produce Figure 7.12, we simply call the \texttt{plot()} function:

<<>>=
par(mfrow=c(1,3))
plot(gam.m3, se=TRUE, col="blue")
@

The generic \texttt{plot()} function recognizes that \texttt{gam.m3} is an object of class \texttt{gam}, and invokes the appropriate \texttt{plot.Gam()} method. Conveniently, even though \texttt{gam1} is not of class \texttt{gam} but rather of class \texttt{lm}, we can still use \texttt{plot.Gam()} on it. Figure 7.11 was produced using the following expression:

<<>>=
par(mfrow=c(1,3))

plot.Gam(gam1, se=TRUE, col="red")

@

Notice here we had to use \texttt{plot.Gam()} rather than the generic \texttt{plot()} function.\\

In these plots, the function of \texttt{year} looks rather linear. We can perform a series of ANOVA tests in order to determine which of these three models is best: a GAM that excludes \texttt{year} ($M_1$), a GAM that uses a linear function of \texttt{year} ($M_2$), or a GAM that uses a spline function of year ($M_3$).

<<>>=
gam.m1=gam(wage~s(age,5)+education, data=Wage)
gam.m2=gam(wage~year+s(age,5)+education, data=Wage)
anova(gam.m1, gam.m2, gam.m3, test="F")
@

We find that there is compelling evidence that a GAM with a linear function of \texttt{year} is better than a GAM that does not include \texttt{year} at all. However, there is no evidence that a non-linear function of \texttt{year} is needed. In other words, based on the results of this ANOVA, $M_2$ is preferred.\\

The \texttt{summary()} function produces a summary of the gam fit.

<<>>=
summary(gam.m3)
@

The p-values for \texttt{year} and \texttt{age} correspond to a null hypothesis of a linear relationship versus the alternative of a non-linear relationship. The large p-value for \texttt{year} reinforces our conclusion from the ANOVA test that a linear function is adequate for this term. However, there is very clear evidence that a non-linear term is required for \texttt{age}.\\

We can make predictions from \texttt{gam} objects, just like from \texttt{lm} objects, using the \texttt{predict()} method for the class \texttt{gam}. Here we make predictions on the training set.

<<>>=
preds = predict(gam.m2, newdata=Wage)
@

We can also use local regression fits as building blocks in a GAM, using the \texttt{lo()} function.

<<>>=
par(mfrow=c(1,3))

gam.lo = gam(wage~s(year, df =4)+ lo(age, span=0.7) + education,
             data=Wage)
plot.Gam(gam.lo, set=TRUE, col="green")
@

Here we have used local regression for the \texttt{age} term, with a span of 0.7. We can also use the \texttt{lo()} function to create interactions before calling the \texttt{gam()} function. For example,

<<>>=
gam.lo.i = gam(wage~lo(year, age, span=0.5)+education, data=Wage)
@

fits a two-term model, in which the first term is an interaction between \texttt{year} and \texttt{age}, fit by a local regression surface. We can plot the resulting two-dimensional surface if we first install the \texttt{akima} package.

<<>>=
par(mfrow=c(1,3))

plot(gam.lo.i)
@

In order to fit a logistic regression GAM, we once again use the \texttt{I()} function in constructing the binary response variable, and set \texttt{family = binomial}.

<<>>=
par(mfrow=c(1,3))

gam.lr=gam(I(wage>250)~year+s(age,df=5)+education, 
           family = binomial, data = Wage)
par(mfrow=c(1,3))
plot(gam.lr, se=T, col="green")
@

It is easy to see that there are no high earners in the \texttt{<HS} category:

<<>>=
table(education, I(wage>250))
@

Hence, we git a logistic regression GAM using all but this category. This provides more sensible results.

<<>>=
par(mfrow=c(1,3))

gam.lr.s = gam(I(wage>250)~year+s(age, df=5)+education, 
               family=binomial, data=Wage,
               subset=(education!="1. < HS Grad"))
plot(gam.lr.s, se=T, col="green")
@


\end{document}
