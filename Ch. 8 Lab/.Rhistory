# set the global chunk options
opts_chunk$set(message=FALSE, # don't print R messages in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
warning=FALSE) # don't print warnings in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
# load .RData files, .R files, etc.
# R packages required
suppressMessages(library(tidyverse, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(ISLR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(splines, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(gam, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(akima, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(tree, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
attach(Carseats)
High = ifelse(Sales<=8, "No", "Yes")
Carseats = data.frame(Carseats, High)
tree.carseats = tree(High~.-Sales, Carseats)
summary(tree.carseats)
View(Carseats)
tree.carseats = tree(High~.-Sales, Carseats)
summary(tree.carseats)
suppressMessages(library(gam, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
attach(Carseats)
High = ifelse(Sales<=8, "No", "Yes")
Carseats = data.frame(Carseats, High)
tree.carseats = tree(High~.-Sales, Carseats)
summary(tree.carseats)
Carseats = Carseats[complete.cases(Carseats), ]
tree.carseats = tree(High~.-Sales, Carseats)
summary(tree.carseats)
View(Carseats)
tree.carseats = tree(High~., Carseats)
Carseats = data.frame(Carseats, High)
summary(tree.carseats)
prune.carseats=prune.misclass(tree.carseats,best=9)
plot(prune.carseats)
text(prune.carseats, pretty=0)
# load .RData files, .R files, etc.
# R packages required
suppressMessages(library(tidyverse, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
# set the global chunk options
opts_chunk$set(message=FALSE, # don't print R messages in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
warning=FALSE) # don't print warnings in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
# load .RData files, .R files, etc.
# R packages required
suppressMessages(library(tidyverse, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(ISLR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(splines, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(gam, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(akima, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(tree, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
attach(Carseats)
High = ifelse(Sales<=8, "No", "Yes")
data(Carseats)
attach(Carseats)
High = ifelse(Sales<=8, "No", "Yes")
Carseats = data.frame(Carseats, High)
tree.carseats = tree(High~.-Sales, Carseats)
tree.carseats = tree(High~.-Sales, data=Carseats)
summary(tree.carseats)
View(Carseats)
data(Carseats)
attach(Carseats)
High = ifelse(Sales<=8, "No", "Yes")
Carseats = data.frame(Carseats, as.factor(High))
tree.carseats = tree(High~.-Sales, data=Carseats)
summary(tree.carseats)
class(Carseat$High)
class(Carseats$High)
View(Carseats)
Carseats = data.frame(Carseats, High=as.factor(High))
data(Carseats)
attach(Carseats)
High = ifelse(Sales<=8, "No", "Yes")
Carseats = data.frame(Carseats, High=as.factor(High))
View(Carseats)
tree.carseats = tree(High~.-Sales, data=Carseats)
summary(tree.carseats)
# set the global chunk options
opts_chunk$set(message=FALSE, # don't print R messages in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
warning=FALSE) # don't print warnings in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
# load .RData files, .R files, etc.
# R packages required
suppressMessages(library(tidyverse, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(ISLR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(splines, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(gam, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(akima, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(tree, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(MASS, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
set.seed(1)
train = sample(1:nrow(Boston), nrow(Boston)/2)
tree.boston = tree(medv~., Boston, subset=train)
summary(tree.boston)
plot(tree.boston)
text(tree.boston, pretty=0)
yhat = predict(tree.boston, newdata=Boston[-train,])
boston.test = Boston[-train, "medv"]
plot(yhat, boston.test)
abline(0,1)
mean((yhat-boston.test)^2)
# set the global chunk options
opts_chunk$set(message=FALSE, # don't print R messages in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
warning=FALSE) # don't print warnings in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
# load .RData files, .R files, etc.
# R packages required
suppressMessages(library(tidyverse, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(ISLR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(splines, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(gam, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(akima, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(tree, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(MASS, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(randomForest, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(gbm, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(e1071, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(LiblineaR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
install.packages("LiblineaR")
# set the global chunk options
opts_chunk$set(message=FALSE, # don't print R messages in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
warning=FALSE) # don't print warnings in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
# load .RData files, .R files, etc.
# R packages required
suppressMessages(library(tidyverse, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(ISLR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(splines, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(gam, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(akima, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(tree, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(MASS, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(randomForest, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(gbm, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(e1071, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(LiblineaR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
set.seed(1)
x=matrix(rnorm(20*2), ncol=2)
y=c(rep(-1,10), rep(1,10))
x[y==1,]=x[y==1,]+1
plot(x, col=(3-y))
suppressMessages(library(ROCR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
install.packages("ROCR")
# set the global chunk options
opts_chunk$set(message=FALSE, # don't print R messages in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
warning=FALSE) # don't print warnings in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
# load .RData files, .R files, etc.
# R packages required
suppressMessages(library(tidyverse, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(ISLR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(splines, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(gam, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(akima, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(tree, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(MASS, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(randomForest, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(gbm, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(e1071, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(LiblineaR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(ROCR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
# Chunk 1
# set the global chunk options
opts_chunk$set(message=FALSE, # don't print R messages in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
warning=FALSE) # don't print warnings in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
# load .RData files, .R files, etc.
# R packages required
suppressMessages(library(tidyverse, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(ISLR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(splines, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(gam, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(akima, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(tree, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(MASS, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(randomForest, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(gbm, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(e1071, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(LiblineaR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(ROCR, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
# Chunk 2
set.seed(1)
x=matrix(rnorm(20*2), ncol=2)
y=c(rep(-1,10), rep(1,10))
x[y==1,]=x[y==1,]+1
plot(x, col=(3-y))
# Chunk 3
dat = data.frame(x=x, y=as.factor(y))
svmfit=svm(y~., data=dat, kernel="linear", cost=10,
scale=FALSE)
# Chunk 4
plot(svmfit, dat)
# Chunk 5
svmfit$index
# Chunk 6
summary(svmfit)
# Chunk 7
svmfit = svm(y~., data=dat, kernel = "linear",
cost = 0.1, scale =FALSE)
plot(svmfit,dat)
svmfit$index
# Chunk 8
set.seed(1)
tune.out = tune(svm, y~., data=dat,
kernel="linear",
ranges = list(cost=c(0.001, 0.01,
0.1, 1, 5,
10, 100)))
# Chunk 9
summary(tune.out)
# Chunk 10
bestmod = tune.out$best.model
summary(bestmod)
# Chunk 11
xtest = matrix(rnorm(20*2), ncol=2)
ytest = sample(c(-1,1), 20,rep=TRUE)
xtest[ytest==1,]=xtest[ytest==1,]+1
testdat=data.frame(x=xtest, y=as.factor(ytest))
# Chunk 12
ypred=predict(bestmod, testdat)
table(predict=ypred, truth=testdat$y)
# Chunk 13
svmfit=svm(y~., data=dat, kernel="linear",
cost=0.01, scale=FALSE)
ypred=predict(svmfit, testdat)
table(predict=ypred, truth=testdat$y)
# Chunk 14
x[y==1,]=x[y==1,]+0.5
plot(x, col=(y+5)/2, pch=19)
# Chunk 15
dat = data.frame(x=x, y=as.factor(y))
svmfit= svm(y~., data = dat,
kernel = "linear", cost =1e5)
summary(svmfit)
# Chunk 16
svmfit=svm(y~., data=dat, kernel="linear", cost=1)
summary(svmfit)
plot(svmfit,dat)
# Chunk 17
set.seed(1)
x=matrix(rnorm(200*2), ncol=2)
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
y=c(rep(1,150),rep(2,50))
dat=data.frame(x=x, y=as.factor(y))
# Chunk 18
plot(x, col=y)
# Chunk 19
train = sample(200,100)
svmfit=svm(y~., data=dat[train,],
kernel="radial", gamma=1,
cost=1)
plot(svmfit, dat[train,])
# Chunk 20
summary(svmfit)
# Chunk 21
svmfit=svm(y~., data=dat[train,],
kernel="radial",gamma=1,
cost=1e5)
plot(svmfit, dat[train,])
# Chunk 22
set.seed(1)
tune.out = tune(svm, y~., data=dat[train,],
kernel="radial",
ranges=list(cost=c(0.1,1,
10,100,
1000)),
gamma=c(0.5,1,2,3,4))
summary(tune.out)
# Chunk 23
table(true=dat[-train,"y"],
pred=predict(tune.out$best.model,
newdata=dat[-train,]))
# Chunk 24
rocplot=function(pred, truth, ...){
predob= prediction(pred,truth)
perf=performance(predob, "tpr", "fpr")
plot(perf,...)
}
# Chunk 25
svmfit.opt=svm(y~., data=dat[train,],
kernel="radial",
gamma=2, cost=1,
decision.values=T)
fitted=attributes(predict(svmfit.opt,dat[train,],
decision.values=TRUE))$decision.values
# Chunk 26
par(mfrow=c(1,2))
rocplot(fitted, dat[train,"y"],
main="Training Data")
svmfit.flex=svm(y~., data=dat[train,],
kernel="radial",
gamma=50, cost=1, decision.values=T)
fitted= attributes(predict(svmfit.flex, dat[train,],
decision.values=T))$decision.values
rocplot(fitted,dat[train,"y"], add=T,
col="red")
fitted = attributes(predict(svmfit.opt,
dat[-train,],
decision.values=T))$decision.values
rocplot(fitted,dat[-train,"y"], main="Test Data")
fitted=attributes(predict(svmfit.flex, dat[-train,],
decision.values=T))$decision.values
rocplot(fitted, dat[-train,"y"], add=T, col="red")
